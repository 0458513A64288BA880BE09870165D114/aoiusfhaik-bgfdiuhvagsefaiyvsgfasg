local player = cloneref(game:GetService("Players")).LocalPlayer
local connections = {
    hooked = {},
    current = {},
}
local Funcs = {}

Funcs.EnvCheck = function(env)
    for _, func in env do
        if type(fn) == 'Function' and isfunctionhooked(func) then player:Destroy() return end
    end
end

Funcs.EnvCheck(getgenv())
Funcs.EnvCheck(getrenv())

Funcs.HookLogs = function(connection)
    pcall(function()
        local actable = getupvalues(connection.Function)[9]
        local acfunction = actable[1]

        if acfunction then
            setupvalue(acfunction, 14, function(...)
                return function(...)
                    local args = { ... }
                    if type(args[1]) == "table" then
                        for i = 1, 4 do
                            local item = args[1][i]
                            if typeof(item) == "userdata" and item.Disconnect then
                                pcall(function() item:Disconnect() end)
                            end
                        end
                    end
                end
            end)

            setupvalue(acfunction, 1, function() task.wait(200) end)
            hookfunction(acfunction, function() return {} end)
        end
    end)
end

local last = 0
local interval = 5
connections.sniffer = cloneref(game:GetService("RunService")).RenderStepped:Connect(function()
    if #getconnections(cloneref(game:GetService("LogService")).MessageOut) >= 2 then
        connections.sniffer:Disconnect()
    end

    if tick() - last >= interval then
        last = tick()
        for _, connection in getconnections(cloneref(game:GetService("LogService")).MessageOut) do
            if not table.find(connections.current, connection) then
                table.insert(connections.current, connection)
                table.insert(connections.hooked, connection)
                Funcs.HookLogs(connection)
            end
        end
    end
end)
